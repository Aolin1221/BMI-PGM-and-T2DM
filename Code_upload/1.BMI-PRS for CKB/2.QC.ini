## 将base文件整理成LDpred标准的输入格式
# 8.29更新：一个底层错误，清洗GWAS时，没有考虑到翻转-颠倒后匹配的情况，造成HS_ALL出现了重复值（已检查过，仅HS_ALL有重复值）。补充清洗时的去重代码即可

#===============================================================================
# 准备1. 读取baseclean文件
library(data.table)
ssf <- fread("/public/home/liaolin/BMIPRS/prsice/bbj/base/bbjclean", header=T)
ssf <- fread("/public/home/liaolin/BMIPRS/prsice/giant/base/giantclean.txt", header=T)
N0 = nrow(ssf)#最初有13183997个位点/941

# 准备2. 匹配CKB info.table_V3文件
message(paste0("### Reading info.table of target dataset: "), INFO_FILE)
info<- fread("/public/home/yangsongchun/share/ckb_info_table_modified_V3.txt",header=TRUE)
#===============================================================================
## 首先对SSF本身进行质控
# 质控1： base数据集中填补质量低的位点
ssf$INFO <- ifelse(is.na(ssf$INFO), 1, ssf$INFO)   # 没有INFO值，则默认都为1
sck1 <- ifelse( ssf$INFO < 0.8, FALSE, TRUE )
ssf <- subset(ssf, sck1)
n1 = nrow(ssf)
d1 = N0 - n1 #剔除0个位点/0

# 质控2： base数据集中的低频位点
sck2 <- ifelse( ssf$MAF < 0.01, FALSE, TRUE )
ssf <- subset(ssf, sck2)
n2 = nrow(ssf)
d2 = n1 - n2 #剔除51045个位点/0
#===============================================================================
## 接下来
# 质控1. 剔除allele不匹配的位点
# 在目标数据库中寻找匹配位点
info_sub <- subset(info, BP %in% ssf$BP)
df <- merge(ssf, info_sub, by=c("CHR", "BP"))
df <- as.data.frame(df)

# 先标记能够直接匹配的位点
ck1 <- ifelse( (df[,"EA"]==df[,"A1"] & df[,"NEA"]==df[,"A2"]) | 
               (df[,"EA"]==df[,"A2"] & df[,"NEA"]==df[,"A1"]), TRUE, FALSE)
df1 <- subset(df, ck1)

# 再处理不能直接匹配的位点
df2 <- subset(df, !ck1)
if (nrow(df2) > 0) {
    fEA <- reverse_allele(df2$EA)
    fNEA <- reverse_allele(df2$NEA)
    ck2 <- ifelse( (df2$A1==fEA & df2$A2==fNEA) | 
                (df2$A1==fNEA & df2$A2==fEA), TRUE, FALSE)
    # 保留flip后能够匹配的，并将原始EA和NEA flip到和目标数据库一致
    df2_1 <- subset(df2, ck2)
    if (nrow(df2_1) > 0) {
        df2_1$EA <- reverse_allele(df2_1$EA)
        df2_1$NEA <- reverse_allele(df2_1$NEA)
    }
}

# 合并能够匹配allele的位点
if (nrow(df2) > 0) {
    df <- rbind(df1, df2_1)
}
N1 = nrow(df)  #剔除无法与CKB质控后数据库匹配的位点数
D1 = n2 - N1 #剔除2973184个位点/31
#-------------------------------------------------------------------------------
# 质控2. 剔除易混淆位点（可选）

special <- ifelse( (df[,"EA"]=="C" & df[,"NEA"]=="G") |
                   (df[,"EA"]=="G" & df[,"NEA"]=="C") |
                   (df[,"EA"]=="A" & df[,"NEA"]=="T") |
                   (df[,"EA"]=="T" & df[,"NEA"]=="A"), TRUE, FALSE)
df <- subset(df, !special)

N2 = nrow(df)
D2 = N1 - N2 #剔除1464482个位点/130
#-------------------------------------------------------------------------------
# 质控3. 剔除插入缺失位点（可选）
# 计算碱基总字符数

nchar <- nchar(df[,"EA"]) + nchar(df[,"NEA"])
indel <- ifelse(nchar>2, TRUE, FALSE)
df <- subset(df, !indel)

N3 = nrow(df)
D3 = N2 - N3 #bbj剔除569367个位点
#-------------------------------------------------------------------------------
# 质控4. 剔除CKB填补质量低的位点（可选）

lowinfo <- ifelse(df[,"info"] < 0.8, TRUE, FALSE)
df <- subset(df, !lowinfo)

N4 = nrow(df)
D4 = N3 - N4 #bbj剔除2211502个位点
D4 = N2 - N4 #GIANT剔除31个位点
#-------------------------------------------------------------------------------
# 质控5. 剔除目标人群最小等位基因频率很小的位点（可选）
lowfreq <- ifelse(df[,"A1_freq"] < 0.01| df[,"A1_freq"] > 1-0.01, TRUE, FALSE)
df <- subset(df, !lowfreq)

N5 = nrow(df)
D5 = N4 - N5 #剔除617162个位点/41
#-------------------------------------------------------------------------------
# 质控6. 剔除目标人群不满足哈迪温伯格平衡的位点（可选）

viohwe <- ifelse(df[,"P_HW"] < 0.000001, TRUE, FALSE)
df <- subset(df, !viohwe)

N6 = nrow(df)
D6 = N5 - N6 #剔除61965个位点/10


## 整理标准格式
# 将beta值变为正值
df$final_EA <- ifelse(df$BETA>=0, df[,"EA"], df[,"NEA"])
df$final_NEA <- ifelse(df$BETA>=0, df[,"NEA"], df[,"EA"])
df$final_BETA <- abs(df$BETA)
df$final_EAF <- ifelse(df$BETA>=0, df[,"EAF"], 1-df[,"EAF"])

# 两个reference文件的变量名有点区别

out1 <- subset(df, select=c("SNP", "CHR", "BP", "final_EA", "final_NEA", "final_EAF", "final_BETA", "SE", "P"))
colnames(out1) <- c("SNP", "CHR", "BP", "A1", "A2", "A1FREQ", "BETA", "SE", "P")

out2 <- subset(df, select=c("rsid", "CHR", "BP", "final_EA", "final_NEA", "final_EAF", "final_BETA", "SE", "P"))
colnames(out2) <- c("SNP", "CHR", "BP", "A1", "A2", "A1FREQ", "BETA", "SE", "P")

fwrite(out1, file="/public/home/liaolin/BMIPRS/prsice/bbj/QC/SNP.QC", sep=" ", quote=F, na="NA")#BBJ
fwrite(out2, file="/public/home/liaolin/BMIPRS/prsice/bbj/QC/RSID.QC", sep=" ", quote=F, na="NA")#BBJ

fwrite(out2, file="/public/home/liaolin/BMIPRS/prsice/giant/QC/RSID.QC", sep=" ", quote=F, na="NA")#GIANT
fwrite(out1, file="/public/home/liaolin/BMIPRS/prsice/giant/QC/SNP.QC", sep=" ", quote=F, na="NA")#GIANT

# 分染色体输出结果-bbj
for (i in 1:22) {
    outchr <- subset(out1, CHR == i)
    if (nrow(outchr)>0) {
        fwrite(outchr, file=paste0("/public/home/liaolin/BMIPRS/prsice/bbj/QC/snp/chr", i, ".txt"), sep=" ", quote=F, na="NA")
    }
}

#分染色体输出结果-giant
for (i in 1:22) {
    outchr <- subset(prscs, CHR == i)
    if (nrow(outchr)>0) {
        fwrite(outchr, file=paste0("/public/home/liaolin/BMIPRS/prscs/bbj/chr", i, ".txt"), sep=" ", quote=F, na="NA")
    }
}


#整理成prs-cs的格式和prsice的格式

prscs<-subset(out2,select=c("SNP","A1","A2","BETA","SE"))
for (i in 1:22) {
    outchr <- subset(out2, CHR == i)
    outchr<-subset(out2,select=c("SNP","A1","A2","BETA","SE"))
    if (nrow(outchr)>0) {
        fwrite(outchr, file=paste0("/public/home/liaolin/BMIPRS/prscs/bbj/chr", i, ".txt"), sep=" ", quote=F, na="NA")
    }
}

prsice<-subset(out2,select=c("SNP","A1","A2","P","BETA","SE"))
prsice<-subset(out1,select=c("SNP","A1","A2","P","BETA","SE"))

#PRSICE 前需要修剪LD，需要提提取snp位点信息
write.table(subset(prsice,select="SNP"),"/public/home/liaolin/BMIPRS/prsice/bbj/QC/snp/snplist.txt",col.names=FALSE,row.names=FALSE,quote=FALSE,sep=" ")
head(subset(prsice,select="SNP"))
write.table(subset(prsice,select="SNP"),"/public/home/liaolin/BMIPRS/prsice/giant/QC/snp/snplist.txt",col.names=FALSE,row.names=FALSE,quote=FALSE,sep=" ")
head(subset(prsice,select="SNP"))

fwrite(prscs, file="/public/home/liaolin/BMIPRS/prscs/bbj/beta.txt", sep=" ", quote=F, na="NA")
fwrite(prsice, file="/public/home/liaolin/BMIPRS/prsice/bbj/QC/rsid/beta.txt", sep=" ", quote=F, na="NA")

fwrite(prsice, file="/public/home/liaolin/BMIPRS/prsice/giant/QC/rsid/beta.txt", sep=" ", quote=F, na="NA")

#分染色体输出结果（prscs）-bbj
for (i in 1:22) {
    outchr <- subset(out2, CHR == i)
    outchr<-subset(out2,select=c("SNP","A1","A2","BETA","SE"))
    if (nrow(outchr)>0) {
        fwrite(outchr, file=paste0("/public/home/liaolin/BMIPRS/prsice/bbj/QC/rsid/chr", i, ".txt"), sep=" ", quote=F, na="NA")
    }
}

#分染色体输出结果（prscs）-giant
for (i in 1:22) {
    outchr <- subset(out2, CHR == i)
    outchr<-subset(out2,select=c("SNP","A1","A2","BETA","SE"))
    if (nrow(outchr)>0) {
        fwrite(outchr, file=paste0("/public/home/liaolin/BMIPRS/prsice/giant/QC/rsid/chr", i, ".txt"), sep=" ", quote=F, na="NA")
    }
}



